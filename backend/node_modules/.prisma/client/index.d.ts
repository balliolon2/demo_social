
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model replies
 * 
 */
export type replies = $Result.DefaultSelection<Prisma.$repliesPayload>
/**
 * Model threads
 * 
 */
export type threads = $Result.DefaultSelection<Prisma.$threadsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const users_role: {
  user: 'user',
  admin: 'admin'
};

export type users_role = (typeof users_role)[keyof typeof users_role]

}

export type users_role = $Enums.users_role

export const users_role: typeof $Enums.users_role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Replies
 * const replies = await prisma.replies.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Replies
   * const replies = await prisma.replies.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.replies`: Exposes CRUD operations for the **replies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Replies
    * const replies = await prisma.replies.findMany()
    * ```
    */
  get replies(): Prisma.repliesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.threads`: Exposes CRUD operations for the **threads** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Threads
    * const threads = await prisma.threads.findMany()
    * ```
    */
  get threads(): Prisma.threadsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    replies: 'replies',
    threads: 'threads',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "replies" | "threads" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      replies: {
        payload: Prisma.$repliesPayload<ExtArgs>
        fields: Prisma.repliesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.repliesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.repliesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload>
          }
          findFirst: {
            args: Prisma.repliesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.repliesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload>
          }
          findMany: {
            args: Prisma.repliesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload>[]
          }
          create: {
            args: Prisma.repliesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload>
          }
          createMany: {
            args: Prisma.repliesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.repliesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload>
          }
          update: {
            args: Prisma.repliesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload>
          }
          deleteMany: {
            args: Prisma.repliesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.repliesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.repliesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repliesPayload>
          }
          aggregate: {
            args: Prisma.RepliesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReplies>
          }
          groupBy: {
            args: Prisma.repliesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RepliesGroupByOutputType>[]
          }
          count: {
            args: Prisma.repliesCountArgs<ExtArgs>
            result: $Utils.Optional<RepliesCountAggregateOutputType> | number
          }
        }
      }
      threads: {
        payload: Prisma.$threadsPayload<ExtArgs>
        fields: Prisma.threadsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.threadsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.threadsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload>
          }
          findFirst: {
            args: Prisma.threadsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.threadsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload>
          }
          findMany: {
            args: Prisma.threadsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload>[]
          }
          create: {
            args: Prisma.threadsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload>
          }
          createMany: {
            args: Prisma.threadsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.threadsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload>
          }
          update: {
            args: Prisma.threadsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload>
          }
          deleteMany: {
            args: Prisma.threadsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.threadsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.threadsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$threadsPayload>
          }
          aggregate: {
            args: Prisma.ThreadsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThreads>
          }
          groupBy: {
            args: Prisma.threadsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThreadsGroupByOutputType>[]
          }
          count: {
            args: Prisma.threadsCountArgs<ExtArgs>
            result: $Utils.Optional<ThreadsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    replies?: repliesOmit
    threads?: threadsOmit
    users?: usersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RepliesCountOutputType
   */

  export type RepliesCountOutputType = {
    other_replies: number
  }

  export type RepliesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    other_replies?: boolean | RepliesCountOutputTypeCountOther_repliesArgs
  }

  // Custom InputTypes
  /**
   * RepliesCountOutputType without action
   */
  export type RepliesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepliesCountOutputType
     */
    select?: RepliesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RepliesCountOutputType without action
   */
  export type RepliesCountOutputTypeCountOther_repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repliesWhereInput
  }


  /**
   * Count Type ThreadsCountOutputType
   */

  export type ThreadsCountOutputType = {
    replies: number
  }

  export type ThreadsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | ThreadsCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * ThreadsCountOutputType without action
   */
  export type ThreadsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThreadsCountOutputType
     */
    select?: ThreadsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThreadsCountOutputType without action
   */
  export type ThreadsCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repliesWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    replies: number
    threads: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | UsersCountOutputTypeCountRepliesArgs
    threads?: boolean | UsersCountOutputTypeCountThreadsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repliesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: threadsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model replies
   */

  export type AggregateReplies = {
    _count: RepliesCountAggregateOutputType | null
    _avg: RepliesAvgAggregateOutputType | null
    _sum: RepliesSumAggregateOutputType | null
    _min: RepliesMinAggregateOutputType | null
    _max: RepliesMaxAggregateOutputType | null
  }

  export type RepliesAvgAggregateOutputType = {
    replie_id: number | null
    thread_id: number | null
    user_id: number | null
    parent_id: number | null
  }

  export type RepliesSumAggregateOutputType = {
    replie_id: number | null
    thread_id: number | null
    user_id: number | null
    parent_id: number | null
  }

  export type RepliesMinAggregateOutputType = {
    replie_id: number | null
    thread_id: number | null
    user_id: number | null
    parent_id: number | null
    body: string | null
    is_deleted: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type RepliesMaxAggregateOutputType = {
    replie_id: number | null
    thread_id: number | null
    user_id: number | null
    parent_id: number | null
    body: string | null
    is_deleted: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type RepliesCountAggregateOutputType = {
    replie_id: number
    thread_id: number
    user_id: number
    parent_id: number
    body: number
    is_deleted: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type RepliesAvgAggregateInputType = {
    replie_id?: true
    thread_id?: true
    user_id?: true
    parent_id?: true
  }

  export type RepliesSumAggregateInputType = {
    replie_id?: true
    thread_id?: true
    user_id?: true
    parent_id?: true
  }

  export type RepliesMinAggregateInputType = {
    replie_id?: true
    thread_id?: true
    user_id?: true
    parent_id?: true
    body?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
  }

  export type RepliesMaxAggregateInputType = {
    replie_id?: true
    thread_id?: true
    user_id?: true
    parent_id?: true
    body?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
  }

  export type RepliesCountAggregateInputType = {
    replie_id?: true
    thread_id?: true
    user_id?: true
    parent_id?: true
    body?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type RepliesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which replies to aggregate.
     */
    where?: repliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replies to fetch.
     */
    orderBy?: repliesOrderByWithRelationInput | repliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: repliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned replies
    **/
    _count?: true | RepliesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepliesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepliesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepliesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepliesMaxAggregateInputType
  }

  export type GetRepliesAggregateType<T extends RepliesAggregateArgs> = {
        [P in keyof T & keyof AggregateReplies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReplies[P]>
      : GetScalarType<T[P], AggregateReplies[P]>
  }




  export type repliesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repliesWhereInput
    orderBy?: repliesOrderByWithAggregationInput | repliesOrderByWithAggregationInput[]
    by: RepliesScalarFieldEnum[] | RepliesScalarFieldEnum
    having?: repliesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepliesCountAggregateInputType | true
    _avg?: RepliesAvgAggregateInputType
    _sum?: RepliesSumAggregateInputType
    _min?: RepliesMinAggregateInputType
    _max?: RepliesMaxAggregateInputType
  }

  export type RepliesGroupByOutputType = {
    replie_id: number
    thread_id: number
    user_id: number
    parent_id: number | null
    body: string
    is_deleted: boolean
    created_at: Date
    updated_at: Date | null
    _count: RepliesCountAggregateOutputType | null
    _avg: RepliesAvgAggregateOutputType | null
    _sum: RepliesSumAggregateOutputType | null
    _min: RepliesMinAggregateOutputType | null
    _max: RepliesMaxAggregateOutputType | null
  }

  type GetRepliesGroupByPayload<T extends repliesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepliesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepliesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepliesGroupByOutputType[P]>
            : GetScalarType<T[P], RepliesGroupByOutputType[P]>
        }
      >
    >


  export type repliesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    replie_id?: boolean
    thread_id?: boolean
    user_id?: boolean
    parent_id?: boolean
    body?: boolean
    is_deleted?: boolean
    created_at?: boolean
    updated_at?: boolean
    threads?: boolean | threadsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    replies?: boolean | replies$repliesArgs<ExtArgs>
    other_replies?: boolean | replies$other_repliesArgs<ExtArgs>
    _count?: boolean | RepliesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["replies"]>



  export type repliesSelectScalar = {
    replie_id?: boolean
    thread_id?: boolean
    user_id?: boolean
    parent_id?: boolean
    body?: boolean
    is_deleted?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type repliesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"replie_id" | "thread_id" | "user_id" | "parent_id" | "body" | "is_deleted" | "created_at" | "updated_at", ExtArgs["result"]["replies"]>
  export type repliesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    threads?: boolean | threadsDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    replies?: boolean | replies$repliesArgs<ExtArgs>
    other_replies?: boolean | replies$other_repliesArgs<ExtArgs>
    _count?: boolean | RepliesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $repliesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "replies"
    objects: {
      threads: Prisma.$threadsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
      replies: Prisma.$repliesPayload<ExtArgs> | null
      other_replies: Prisma.$repliesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      replie_id: number
      thread_id: number
      user_id: number
      parent_id: number | null
      body: string
      is_deleted: boolean
      created_at: Date
      updated_at: Date | null
    }, ExtArgs["result"]["replies"]>
    composites: {}
  }

  type repliesGetPayload<S extends boolean | null | undefined | repliesDefaultArgs> = $Result.GetResult<Prisma.$repliesPayload, S>

  type repliesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<repliesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RepliesCountAggregateInputType | true
    }

  export interface repliesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['replies'], meta: { name: 'replies' } }
    /**
     * Find zero or one Replies that matches the filter.
     * @param {repliesFindUniqueArgs} args - Arguments to find a Replies
     * @example
     * // Get one Replies
     * const replies = await prisma.replies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends repliesFindUniqueArgs>(args: SelectSubset<T, repliesFindUniqueArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Replies that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {repliesFindUniqueOrThrowArgs} args - Arguments to find a Replies
     * @example
     * // Get one Replies
     * const replies = await prisma.replies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends repliesFindUniqueOrThrowArgs>(args: SelectSubset<T, repliesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Replies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repliesFindFirstArgs} args - Arguments to find a Replies
     * @example
     * // Get one Replies
     * const replies = await prisma.replies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends repliesFindFirstArgs>(args?: SelectSubset<T, repliesFindFirstArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Replies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repliesFindFirstOrThrowArgs} args - Arguments to find a Replies
     * @example
     * // Get one Replies
     * const replies = await prisma.replies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends repliesFindFirstOrThrowArgs>(args?: SelectSubset<T, repliesFindFirstOrThrowArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Replies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repliesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Replies
     * const replies = await prisma.replies.findMany()
     * 
     * // Get first 10 Replies
     * const replies = await prisma.replies.findMany({ take: 10 })
     * 
     * // Only select the `replie_id`
     * const repliesWithReplie_idOnly = await prisma.replies.findMany({ select: { replie_id: true } })
     * 
     */
    findMany<T extends repliesFindManyArgs>(args?: SelectSubset<T, repliesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Replies.
     * @param {repliesCreateArgs} args - Arguments to create a Replies.
     * @example
     * // Create one Replies
     * const Replies = await prisma.replies.create({
     *   data: {
     *     // ... data to create a Replies
     *   }
     * })
     * 
     */
    create<T extends repliesCreateArgs>(args: SelectSubset<T, repliesCreateArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Replies.
     * @param {repliesCreateManyArgs} args - Arguments to create many Replies.
     * @example
     * // Create many Replies
     * const replies = await prisma.replies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends repliesCreateManyArgs>(args?: SelectSubset<T, repliesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Replies.
     * @param {repliesDeleteArgs} args - Arguments to delete one Replies.
     * @example
     * // Delete one Replies
     * const Replies = await prisma.replies.delete({
     *   where: {
     *     // ... filter to delete one Replies
     *   }
     * })
     * 
     */
    delete<T extends repliesDeleteArgs>(args: SelectSubset<T, repliesDeleteArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Replies.
     * @param {repliesUpdateArgs} args - Arguments to update one Replies.
     * @example
     * // Update one Replies
     * const replies = await prisma.replies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends repliesUpdateArgs>(args: SelectSubset<T, repliesUpdateArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Replies.
     * @param {repliesDeleteManyArgs} args - Arguments to filter Replies to delete.
     * @example
     * // Delete a few Replies
     * const { count } = await prisma.replies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends repliesDeleteManyArgs>(args?: SelectSubset<T, repliesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repliesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Replies
     * const replies = await prisma.replies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends repliesUpdateManyArgs>(args: SelectSubset<T, repliesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Replies.
     * @param {repliesUpsertArgs} args - Arguments to update or create a Replies.
     * @example
     * // Update or create a Replies
     * const replies = await prisma.replies.upsert({
     *   create: {
     *     // ... data to create a Replies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Replies we want to update
     *   }
     * })
     */
    upsert<T extends repliesUpsertArgs>(args: SelectSubset<T, repliesUpsertArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repliesCountArgs} args - Arguments to filter Replies to count.
     * @example
     * // Count the number of Replies
     * const count = await prisma.replies.count({
     *   where: {
     *     // ... the filter for the Replies we want to count
     *   }
     * })
    **/
    count<T extends repliesCountArgs>(
      args?: Subset<T, repliesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepliesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepliesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepliesAggregateArgs>(args: Subset<T, RepliesAggregateArgs>): Prisma.PrismaPromise<GetRepliesAggregateType<T>>

    /**
     * Group by Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repliesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends repliesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: repliesGroupByArgs['orderBy'] }
        : { orderBy?: repliesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, repliesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepliesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the replies model
   */
  readonly fields: repliesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for replies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__repliesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    threads<T extends threadsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, threadsDefaultArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    replies<T extends replies$repliesArgs<ExtArgs> = {}>(args?: Subset<T, replies$repliesArgs<ExtArgs>>): Prisma__repliesClient<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    other_replies<T extends replies$other_repliesArgs<ExtArgs> = {}>(args?: Subset<T, replies$other_repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the replies model
   */
  interface repliesFieldRefs {
    readonly replie_id: FieldRef<"replies", 'Int'>
    readonly thread_id: FieldRef<"replies", 'Int'>
    readonly user_id: FieldRef<"replies", 'Int'>
    readonly parent_id: FieldRef<"replies", 'Int'>
    readonly body: FieldRef<"replies", 'String'>
    readonly is_deleted: FieldRef<"replies", 'Boolean'>
    readonly created_at: FieldRef<"replies", 'DateTime'>
    readonly updated_at: FieldRef<"replies", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * replies findUnique
   */
  export type repliesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * Filter, which replies to fetch.
     */
    where: repliesWhereUniqueInput
  }

  /**
   * replies findUniqueOrThrow
   */
  export type repliesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * Filter, which replies to fetch.
     */
    where: repliesWhereUniqueInput
  }

  /**
   * replies findFirst
   */
  export type repliesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * Filter, which replies to fetch.
     */
    where?: repliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replies to fetch.
     */
    orderBy?: repliesOrderByWithRelationInput | repliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for replies.
     */
    cursor?: repliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of replies.
     */
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * replies findFirstOrThrow
   */
  export type repliesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * Filter, which replies to fetch.
     */
    where?: repliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replies to fetch.
     */
    orderBy?: repliesOrderByWithRelationInput | repliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for replies.
     */
    cursor?: repliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of replies.
     */
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * replies findMany
   */
  export type repliesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * Filter, which replies to fetch.
     */
    where?: repliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of replies to fetch.
     */
    orderBy?: repliesOrderByWithRelationInput | repliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing replies.
     */
    cursor?: repliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` replies.
     */
    skip?: number
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * replies create
   */
  export type repliesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * The data needed to create a replies.
     */
    data: XOR<repliesCreateInput, repliesUncheckedCreateInput>
  }

  /**
   * replies createMany
   */
  export type repliesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many replies.
     */
    data: repliesCreateManyInput | repliesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * replies update
   */
  export type repliesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * The data needed to update a replies.
     */
    data: XOR<repliesUpdateInput, repliesUncheckedUpdateInput>
    /**
     * Choose, which replies to update.
     */
    where: repliesWhereUniqueInput
  }

  /**
   * replies updateMany
   */
  export type repliesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update replies.
     */
    data: XOR<repliesUpdateManyMutationInput, repliesUncheckedUpdateManyInput>
    /**
     * Filter which replies to update
     */
    where?: repliesWhereInput
    /**
     * Limit how many replies to update.
     */
    limit?: number
  }

  /**
   * replies upsert
   */
  export type repliesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * The filter to search for the replies to update in case it exists.
     */
    where: repliesWhereUniqueInput
    /**
     * In case the replies found by the `where` argument doesn't exist, create a new replies with this data.
     */
    create: XOR<repliesCreateInput, repliesUncheckedCreateInput>
    /**
     * In case the replies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<repliesUpdateInput, repliesUncheckedUpdateInput>
  }

  /**
   * replies delete
   */
  export type repliesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    /**
     * Filter which replies to delete.
     */
    where: repliesWhereUniqueInput
  }

  /**
   * replies deleteMany
   */
  export type repliesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which replies to delete
     */
    where?: repliesWhereInput
    /**
     * Limit how many replies to delete.
     */
    limit?: number
  }

  /**
   * replies.replies
   */
  export type replies$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    where?: repliesWhereInput
  }

  /**
   * replies.other_replies
   */
  export type replies$other_repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    where?: repliesWhereInput
    orderBy?: repliesOrderByWithRelationInput | repliesOrderByWithRelationInput[]
    cursor?: repliesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * replies without action
   */
  export type repliesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
  }


  /**
   * Model threads
   */

  export type AggregateThreads = {
    _count: ThreadsCountAggregateOutputType | null
    _avg: ThreadsAvgAggregateOutputType | null
    _sum: ThreadsSumAggregateOutputType | null
    _min: ThreadsMinAggregateOutputType | null
    _max: ThreadsMaxAggregateOutputType | null
  }

  export type ThreadsAvgAggregateOutputType = {
    thread_id: number | null
    user_id: number | null
  }

  export type ThreadsSumAggregateOutputType = {
    thread_id: number | null
    user_id: number | null
  }

  export type ThreadsMinAggregateOutputType = {
    thread_id: number | null
    user_id: number | null
    title: string | null
    body: string | null
    is_locked: boolean | null
    is_deleted: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ThreadsMaxAggregateOutputType = {
    thread_id: number | null
    user_id: number | null
    title: string | null
    body: string | null
    is_locked: boolean | null
    is_deleted: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ThreadsCountAggregateOutputType = {
    thread_id: number
    user_id: number
    title: number
    body: number
    is_locked: number
    is_deleted: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ThreadsAvgAggregateInputType = {
    thread_id?: true
    user_id?: true
  }

  export type ThreadsSumAggregateInputType = {
    thread_id?: true
    user_id?: true
  }

  export type ThreadsMinAggregateInputType = {
    thread_id?: true
    user_id?: true
    title?: true
    body?: true
    is_locked?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
  }

  export type ThreadsMaxAggregateInputType = {
    thread_id?: true
    user_id?: true
    title?: true
    body?: true
    is_locked?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
  }

  export type ThreadsCountAggregateInputType = {
    thread_id?: true
    user_id?: true
    title?: true
    body?: true
    is_locked?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ThreadsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which threads to aggregate.
     */
    where?: threadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of threads to fetch.
     */
    orderBy?: threadsOrderByWithRelationInput | threadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: threadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned threads
    **/
    _count?: true | ThreadsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThreadsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThreadsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThreadsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThreadsMaxAggregateInputType
  }

  export type GetThreadsAggregateType<T extends ThreadsAggregateArgs> = {
        [P in keyof T & keyof AggregateThreads]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThreads[P]>
      : GetScalarType<T[P], AggregateThreads[P]>
  }




  export type threadsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: threadsWhereInput
    orderBy?: threadsOrderByWithAggregationInput | threadsOrderByWithAggregationInput[]
    by: ThreadsScalarFieldEnum[] | ThreadsScalarFieldEnum
    having?: threadsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThreadsCountAggregateInputType | true
    _avg?: ThreadsAvgAggregateInputType
    _sum?: ThreadsSumAggregateInputType
    _min?: ThreadsMinAggregateInputType
    _max?: ThreadsMaxAggregateInputType
  }

  export type ThreadsGroupByOutputType = {
    thread_id: number
    user_id: number
    title: string
    body: string
    is_locked: boolean
    is_deleted: boolean
    created_at: Date
    updated_at: Date | null
    _count: ThreadsCountAggregateOutputType | null
    _avg: ThreadsAvgAggregateOutputType | null
    _sum: ThreadsSumAggregateOutputType | null
    _min: ThreadsMinAggregateOutputType | null
    _max: ThreadsMaxAggregateOutputType | null
  }

  type GetThreadsGroupByPayload<T extends threadsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThreadsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThreadsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThreadsGroupByOutputType[P]>
            : GetScalarType<T[P], ThreadsGroupByOutputType[P]>
        }
      >
    >


  export type threadsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    thread_id?: boolean
    user_id?: boolean
    title?: boolean
    body?: boolean
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: boolean
    updated_at?: boolean
    replies?: boolean | threads$repliesArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | ThreadsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["threads"]>



  export type threadsSelectScalar = {
    thread_id?: boolean
    user_id?: boolean
    title?: boolean
    body?: boolean
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type threadsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"thread_id" | "user_id" | "title" | "body" | "is_locked" | "is_deleted" | "created_at" | "updated_at", ExtArgs["result"]["threads"]>
  export type threadsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | threads$repliesArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | ThreadsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $threadsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "threads"
    objects: {
      replies: Prisma.$repliesPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      thread_id: number
      user_id: number
      title: string
      body: string
      is_locked: boolean
      is_deleted: boolean
      created_at: Date
      updated_at: Date | null
    }, ExtArgs["result"]["threads"]>
    composites: {}
  }

  type threadsGetPayload<S extends boolean | null | undefined | threadsDefaultArgs> = $Result.GetResult<Prisma.$threadsPayload, S>

  type threadsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<threadsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThreadsCountAggregateInputType | true
    }

  export interface threadsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['threads'], meta: { name: 'threads' } }
    /**
     * Find zero or one Threads that matches the filter.
     * @param {threadsFindUniqueArgs} args - Arguments to find a Threads
     * @example
     * // Get one Threads
     * const threads = await prisma.threads.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends threadsFindUniqueArgs>(args: SelectSubset<T, threadsFindUniqueArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Threads that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {threadsFindUniqueOrThrowArgs} args - Arguments to find a Threads
     * @example
     * // Get one Threads
     * const threads = await prisma.threads.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends threadsFindUniqueOrThrowArgs>(args: SelectSubset<T, threadsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Threads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {threadsFindFirstArgs} args - Arguments to find a Threads
     * @example
     * // Get one Threads
     * const threads = await prisma.threads.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends threadsFindFirstArgs>(args?: SelectSubset<T, threadsFindFirstArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Threads that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {threadsFindFirstOrThrowArgs} args - Arguments to find a Threads
     * @example
     * // Get one Threads
     * const threads = await prisma.threads.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends threadsFindFirstOrThrowArgs>(args?: SelectSubset<T, threadsFindFirstOrThrowArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Threads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {threadsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Threads
     * const threads = await prisma.threads.findMany()
     * 
     * // Get first 10 Threads
     * const threads = await prisma.threads.findMany({ take: 10 })
     * 
     * // Only select the `thread_id`
     * const threadsWithThread_idOnly = await prisma.threads.findMany({ select: { thread_id: true } })
     * 
     */
    findMany<T extends threadsFindManyArgs>(args?: SelectSubset<T, threadsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Threads.
     * @param {threadsCreateArgs} args - Arguments to create a Threads.
     * @example
     * // Create one Threads
     * const Threads = await prisma.threads.create({
     *   data: {
     *     // ... data to create a Threads
     *   }
     * })
     * 
     */
    create<T extends threadsCreateArgs>(args: SelectSubset<T, threadsCreateArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Threads.
     * @param {threadsCreateManyArgs} args - Arguments to create many Threads.
     * @example
     * // Create many Threads
     * const threads = await prisma.threads.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends threadsCreateManyArgs>(args?: SelectSubset<T, threadsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Threads.
     * @param {threadsDeleteArgs} args - Arguments to delete one Threads.
     * @example
     * // Delete one Threads
     * const Threads = await prisma.threads.delete({
     *   where: {
     *     // ... filter to delete one Threads
     *   }
     * })
     * 
     */
    delete<T extends threadsDeleteArgs>(args: SelectSubset<T, threadsDeleteArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Threads.
     * @param {threadsUpdateArgs} args - Arguments to update one Threads.
     * @example
     * // Update one Threads
     * const threads = await prisma.threads.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends threadsUpdateArgs>(args: SelectSubset<T, threadsUpdateArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Threads.
     * @param {threadsDeleteManyArgs} args - Arguments to filter Threads to delete.
     * @example
     * // Delete a few Threads
     * const { count } = await prisma.threads.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends threadsDeleteManyArgs>(args?: SelectSubset<T, threadsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {threadsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Threads
     * const threads = await prisma.threads.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends threadsUpdateManyArgs>(args: SelectSubset<T, threadsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Threads.
     * @param {threadsUpsertArgs} args - Arguments to update or create a Threads.
     * @example
     * // Update or create a Threads
     * const threads = await prisma.threads.upsert({
     *   create: {
     *     // ... data to create a Threads
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Threads we want to update
     *   }
     * })
     */
    upsert<T extends threadsUpsertArgs>(args: SelectSubset<T, threadsUpsertArgs<ExtArgs>>): Prisma__threadsClient<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {threadsCountArgs} args - Arguments to filter Threads to count.
     * @example
     * // Count the number of Threads
     * const count = await prisma.threads.count({
     *   where: {
     *     // ... the filter for the Threads we want to count
     *   }
     * })
    **/
    count<T extends threadsCountArgs>(
      args?: Subset<T, threadsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThreadsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThreadsAggregateArgs>(args: Subset<T, ThreadsAggregateArgs>): Prisma.PrismaPromise<GetThreadsAggregateType<T>>

    /**
     * Group by Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {threadsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends threadsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: threadsGroupByArgs['orderBy'] }
        : { orderBy?: threadsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, threadsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThreadsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the threads model
   */
  readonly fields: threadsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for threads.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__threadsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    replies<T extends threads$repliesArgs<ExtArgs> = {}>(args?: Subset<T, threads$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the threads model
   */
  interface threadsFieldRefs {
    readonly thread_id: FieldRef<"threads", 'Int'>
    readonly user_id: FieldRef<"threads", 'Int'>
    readonly title: FieldRef<"threads", 'String'>
    readonly body: FieldRef<"threads", 'String'>
    readonly is_locked: FieldRef<"threads", 'Boolean'>
    readonly is_deleted: FieldRef<"threads", 'Boolean'>
    readonly created_at: FieldRef<"threads", 'DateTime'>
    readonly updated_at: FieldRef<"threads", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * threads findUnique
   */
  export type threadsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * Filter, which threads to fetch.
     */
    where: threadsWhereUniqueInput
  }

  /**
   * threads findUniqueOrThrow
   */
  export type threadsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * Filter, which threads to fetch.
     */
    where: threadsWhereUniqueInput
  }

  /**
   * threads findFirst
   */
  export type threadsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * Filter, which threads to fetch.
     */
    where?: threadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of threads to fetch.
     */
    orderBy?: threadsOrderByWithRelationInput | threadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for threads.
     */
    cursor?: threadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of threads.
     */
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }

  /**
   * threads findFirstOrThrow
   */
  export type threadsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * Filter, which threads to fetch.
     */
    where?: threadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of threads to fetch.
     */
    orderBy?: threadsOrderByWithRelationInput | threadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for threads.
     */
    cursor?: threadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of threads.
     */
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }

  /**
   * threads findMany
   */
  export type threadsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * Filter, which threads to fetch.
     */
    where?: threadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of threads to fetch.
     */
    orderBy?: threadsOrderByWithRelationInput | threadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing threads.
     */
    cursor?: threadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` threads.
     */
    skip?: number
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }

  /**
   * threads create
   */
  export type threadsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * The data needed to create a threads.
     */
    data: XOR<threadsCreateInput, threadsUncheckedCreateInput>
  }

  /**
   * threads createMany
   */
  export type threadsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many threads.
     */
    data: threadsCreateManyInput | threadsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * threads update
   */
  export type threadsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * The data needed to update a threads.
     */
    data: XOR<threadsUpdateInput, threadsUncheckedUpdateInput>
    /**
     * Choose, which threads to update.
     */
    where: threadsWhereUniqueInput
  }

  /**
   * threads updateMany
   */
  export type threadsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update threads.
     */
    data: XOR<threadsUpdateManyMutationInput, threadsUncheckedUpdateManyInput>
    /**
     * Filter which threads to update
     */
    where?: threadsWhereInput
    /**
     * Limit how many threads to update.
     */
    limit?: number
  }

  /**
   * threads upsert
   */
  export type threadsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * The filter to search for the threads to update in case it exists.
     */
    where: threadsWhereUniqueInput
    /**
     * In case the threads found by the `where` argument doesn't exist, create a new threads with this data.
     */
    create: XOR<threadsCreateInput, threadsUncheckedCreateInput>
    /**
     * In case the threads was found with the provided `where` argument, update it with this data.
     */
    update: XOR<threadsUpdateInput, threadsUncheckedUpdateInput>
  }

  /**
   * threads delete
   */
  export type threadsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    /**
     * Filter which threads to delete.
     */
    where: threadsWhereUniqueInput
  }

  /**
   * threads deleteMany
   */
  export type threadsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which threads to delete
     */
    where?: threadsWhereInput
    /**
     * Limit how many threads to delete.
     */
    limit?: number
  }

  /**
   * threads.replies
   */
  export type threads$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    where?: repliesWhereInput
    orderBy?: repliesOrderByWithRelationInput | repliesOrderByWithRelationInput[]
    cursor?: repliesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * threads without action
   */
  export type threadsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    username: string | null
    email: string | null
    pass_hash: string | null
    role: $Enums.users_role | null
    created_at: Date | null
    last_login_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    username: string | null
    email: string | null
    pass_hash: string | null
    role: $Enums.users_role | null
    created_at: Date | null
    last_login_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    username: number
    email: number
    pass_hash: number
    role: number
    created_at: number
    last_login_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    pass_hash?: true
    role?: true
    created_at?: true
    last_login_at?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    pass_hash?: true
    role?: true
    created_at?: true
    last_login_at?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    pass_hash?: true
    role?: true
    created_at?: true
    last_login_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    user_id: number
    username: string
    email: string | null
    pass_hash: string
    role: $Enums.users_role
    created_at: Date
    last_login_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    email?: boolean
    pass_hash?: boolean
    role?: boolean
    created_at?: boolean
    last_login_at?: boolean
    replies?: boolean | users$repliesArgs<ExtArgs>
    threads?: boolean | users$threadsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type usersSelectScalar = {
    user_id?: boolean
    username?: boolean
    email?: boolean
    pass_hash?: boolean
    role?: boolean
    created_at?: boolean
    last_login_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "username" | "email" | "pass_hash" | "role" | "created_at" | "last_login_at", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | users$repliesArgs<ExtArgs>
    threads?: boolean | users$threadsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      replies: Prisma.$repliesPayload<ExtArgs>[]
      threads: Prisma.$threadsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      username: string
      email: string | null
      pass_hash: string
      role: $Enums.users_role
      created_at: Date
      last_login_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    replies<T extends users$repliesArgs<ExtArgs> = {}>(args?: Subset<T, users$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repliesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    threads<T extends users$threadsArgs<ExtArgs> = {}>(args?: Subset<T, users$threadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$threadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly user_id: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly pass_hash: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'users_role'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly last_login_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.replies
   */
  export type users$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the replies
     */
    select?: repliesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the replies
     */
    omit?: repliesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repliesInclude<ExtArgs> | null
    where?: repliesWhereInput
    orderBy?: repliesOrderByWithRelationInput | repliesOrderByWithRelationInput[]
    cursor?: repliesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * users.threads
   */
  export type users$threadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the threads
     */
    select?: threadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the threads
     */
    omit?: threadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: threadsInclude<ExtArgs> | null
    where?: threadsWhereInput
    orderBy?: threadsOrderByWithRelationInput | threadsOrderByWithRelationInput[]
    cursor?: threadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RepliesScalarFieldEnum: {
    replie_id: 'replie_id',
    thread_id: 'thread_id',
    user_id: 'user_id',
    parent_id: 'parent_id',
    body: 'body',
    is_deleted: 'is_deleted',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type RepliesScalarFieldEnum = (typeof RepliesScalarFieldEnum)[keyof typeof RepliesScalarFieldEnum]


  export const ThreadsScalarFieldEnum: {
    thread_id: 'thread_id',
    user_id: 'user_id',
    title: 'title',
    body: 'body',
    is_locked: 'is_locked',
    is_deleted: 'is_deleted',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ThreadsScalarFieldEnum = (typeof ThreadsScalarFieldEnum)[keyof typeof ThreadsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username',
    email: 'email',
    pass_hash: 'pass_hash',
    role: 'role',
    created_at: 'created_at',
    last_login_at: 'last_login_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const repliesOrderByRelevanceFieldEnum: {
    body: 'body'
  };

  export type repliesOrderByRelevanceFieldEnum = (typeof repliesOrderByRelevanceFieldEnum)[keyof typeof repliesOrderByRelevanceFieldEnum]


  export const threadsOrderByRelevanceFieldEnum: {
    title: 'title',
    body: 'body'
  };

  export type threadsOrderByRelevanceFieldEnum = (typeof threadsOrderByRelevanceFieldEnum)[keyof typeof threadsOrderByRelevanceFieldEnum]


  export const usersOrderByRelevanceFieldEnum: {
    username: 'username',
    email: 'email',
    pass_hash: 'pass_hash'
  };

  export type usersOrderByRelevanceFieldEnum = (typeof usersOrderByRelevanceFieldEnum)[keyof typeof usersOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'users_role'
   */
  export type Enumusers_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'users_role'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type repliesWhereInput = {
    AND?: repliesWhereInput | repliesWhereInput[]
    OR?: repliesWhereInput[]
    NOT?: repliesWhereInput | repliesWhereInput[]
    replie_id?: IntFilter<"replies"> | number
    thread_id?: IntFilter<"replies"> | number
    user_id?: IntFilter<"replies"> | number
    parent_id?: IntNullableFilter<"replies"> | number | null
    body?: StringFilter<"replies"> | string
    is_deleted?: BoolFilter<"replies"> | boolean
    created_at?: DateTimeFilter<"replies"> | Date | string
    updated_at?: DateTimeNullableFilter<"replies"> | Date | string | null
    threads?: XOR<ThreadsScalarRelationFilter, threadsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
    replies?: XOR<RepliesNullableScalarRelationFilter, repliesWhereInput> | null
    other_replies?: RepliesListRelationFilter
  }

  export type repliesOrderByWithRelationInput = {
    replie_id?: SortOrder
    thread_id?: SortOrder
    user_id?: SortOrder
    parent_id?: SortOrderInput | SortOrder
    body?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    threads?: threadsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    replies?: repliesOrderByWithRelationInput
    other_replies?: repliesOrderByRelationAggregateInput
    _relevance?: repliesOrderByRelevanceInput
  }

  export type repliesWhereUniqueInput = Prisma.AtLeast<{
    replie_id?: number
    AND?: repliesWhereInput | repliesWhereInput[]
    OR?: repliesWhereInput[]
    NOT?: repliesWhereInput | repliesWhereInput[]
    thread_id?: IntFilter<"replies"> | number
    user_id?: IntFilter<"replies"> | number
    parent_id?: IntNullableFilter<"replies"> | number | null
    body?: StringFilter<"replies"> | string
    is_deleted?: BoolFilter<"replies"> | boolean
    created_at?: DateTimeFilter<"replies"> | Date | string
    updated_at?: DateTimeNullableFilter<"replies"> | Date | string | null
    threads?: XOR<ThreadsScalarRelationFilter, threadsWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
    replies?: XOR<RepliesNullableScalarRelationFilter, repliesWhereInput> | null
    other_replies?: RepliesListRelationFilter
  }, "replie_id">

  export type repliesOrderByWithAggregationInput = {
    replie_id?: SortOrder
    thread_id?: SortOrder
    user_id?: SortOrder
    parent_id?: SortOrderInput | SortOrder
    body?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: repliesCountOrderByAggregateInput
    _avg?: repliesAvgOrderByAggregateInput
    _max?: repliesMaxOrderByAggregateInput
    _min?: repliesMinOrderByAggregateInput
    _sum?: repliesSumOrderByAggregateInput
  }

  export type repliesScalarWhereWithAggregatesInput = {
    AND?: repliesScalarWhereWithAggregatesInput | repliesScalarWhereWithAggregatesInput[]
    OR?: repliesScalarWhereWithAggregatesInput[]
    NOT?: repliesScalarWhereWithAggregatesInput | repliesScalarWhereWithAggregatesInput[]
    replie_id?: IntWithAggregatesFilter<"replies"> | number
    thread_id?: IntWithAggregatesFilter<"replies"> | number
    user_id?: IntWithAggregatesFilter<"replies"> | number
    parent_id?: IntNullableWithAggregatesFilter<"replies"> | number | null
    body?: StringWithAggregatesFilter<"replies"> | string
    is_deleted?: BoolWithAggregatesFilter<"replies"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"replies"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"replies"> | Date | string | null
  }

  export type threadsWhereInput = {
    AND?: threadsWhereInput | threadsWhereInput[]
    OR?: threadsWhereInput[]
    NOT?: threadsWhereInput | threadsWhereInput[]
    thread_id?: IntFilter<"threads"> | number
    user_id?: IntFilter<"threads"> | number
    title?: StringFilter<"threads"> | string
    body?: StringFilter<"threads"> | string
    is_locked?: BoolFilter<"threads"> | boolean
    is_deleted?: BoolFilter<"threads"> | boolean
    created_at?: DateTimeFilter<"threads"> | Date | string
    updated_at?: DateTimeNullableFilter<"threads"> | Date | string | null
    replies?: RepliesListRelationFilter
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type threadsOrderByWithRelationInput = {
    thread_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    is_locked?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    replies?: repliesOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    _relevance?: threadsOrderByRelevanceInput
  }

  export type threadsWhereUniqueInput = Prisma.AtLeast<{
    thread_id?: number
    AND?: threadsWhereInput | threadsWhereInput[]
    OR?: threadsWhereInput[]
    NOT?: threadsWhereInput | threadsWhereInput[]
    user_id?: IntFilter<"threads"> | number
    title?: StringFilter<"threads"> | string
    body?: StringFilter<"threads"> | string
    is_locked?: BoolFilter<"threads"> | boolean
    is_deleted?: BoolFilter<"threads"> | boolean
    created_at?: DateTimeFilter<"threads"> | Date | string
    updated_at?: DateTimeNullableFilter<"threads"> | Date | string | null
    replies?: RepliesListRelationFilter
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "thread_id">

  export type threadsOrderByWithAggregationInput = {
    thread_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    is_locked?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: threadsCountOrderByAggregateInput
    _avg?: threadsAvgOrderByAggregateInput
    _max?: threadsMaxOrderByAggregateInput
    _min?: threadsMinOrderByAggregateInput
    _sum?: threadsSumOrderByAggregateInput
  }

  export type threadsScalarWhereWithAggregatesInput = {
    AND?: threadsScalarWhereWithAggregatesInput | threadsScalarWhereWithAggregatesInput[]
    OR?: threadsScalarWhereWithAggregatesInput[]
    NOT?: threadsScalarWhereWithAggregatesInput | threadsScalarWhereWithAggregatesInput[]
    thread_id?: IntWithAggregatesFilter<"threads"> | number
    user_id?: IntWithAggregatesFilter<"threads"> | number
    title?: StringWithAggregatesFilter<"threads"> | string
    body?: StringWithAggregatesFilter<"threads"> | string
    is_locked?: BoolWithAggregatesFilter<"threads"> | boolean
    is_deleted?: BoolWithAggregatesFilter<"threads"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"threads"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"threads"> | Date | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    user_id?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    email?: StringNullableFilter<"users"> | string | null
    pass_hash?: StringFilter<"users"> | string
    role?: Enumusers_roleFilter<"users"> | $Enums.users_role
    created_at?: DateTimeFilter<"users"> | Date | string
    last_login_at?: DateTimeNullableFilter<"users"> | Date | string | null
    replies?: RepliesListRelationFilter
    threads?: ThreadsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrderInput | SortOrder
    pass_hash?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    last_login_at?: SortOrderInput | SortOrder
    replies?: repliesOrderByRelationAggregateInput
    threads?: threadsOrderByRelationAggregateInput
    _relevance?: usersOrderByRelevanceInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    username?: string
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    pass_hash?: StringFilter<"users"> | string
    role?: Enumusers_roleFilter<"users"> | $Enums.users_role
    created_at?: DateTimeFilter<"users"> | Date | string
    last_login_at?: DateTimeNullableFilter<"users"> | Date | string | null
    replies?: RepliesListRelationFilter
    threads?: ThreadsListRelationFilter
  }, "user_id" | "username" | "email">

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrderInput | SortOrder
    pass_hash?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    last_login_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    email?: StringNullableWithAggregatesFilter<"users"> | string | null
    pass_hash?: StringWithAggregatesFilter<"users"> | string
    role?: Enumusers_roleWithAggregatesFilter<"users"> | $Enums.users_role
    created_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    last_login_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type repliesCreateInput = {
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    threads: threadsCreateNestedOneWithoutRepliesInput
    users: usersCreateNestedOneWithoutRepliesInput
    replies?: repliesCreateNestedOneWithoutOther_repliesInput
    other_replies?: repliesCreateNestedManyWithoutRepliesInput
  }

  export type repliesUncheckedCreateInput = {
    replie_id?: number
    thread_id: number
    user_id: number
    parent_id?: number | null
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    other_replies?: repliesUncheckedCreateNestedManyWithoutRepliesInput
  }

  export type repliesUpdateInput = {
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threads?: threadsUpdateOneRequiredWithoutRepliesNestedInput
    users?: usersUpdateOneRequiredWithoutRepliesNestedInput
    replies?: repliesUpdateOneWithoutOther_repliesNestedInput
    other_replies?: repliesUpdateManyWithoutRepliesNestedInput
  }

  export type repliesUncheckedUpdateInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    thread_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_replies?: repliesUncheckedUpdateManyWithoutRepliesNestedInput
  }

  export type repliesCreateManyInput = {
    replie_id?: number
    thread_id: number
    user_id: number
    parent_id?: number | null
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type repliesUpdateManyMutationInput = {
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repliesUncheckedUpdateManyInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    thread_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type threadsCreateInput = {
    title: string
    body: string
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    replies?: repliesCreateNestedManyWithoutThreadsInput
    users: usersCreateNestedOneWithoutThreadsInput
  }

  export type threadsUncheckedCreateInput = {
    thread_id?: number
    user_id: number
    title: string
    body: string
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    replies?: repliesUncheckedCreateNestedManyWithoutThreadsInput
  }

  export type threadsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replies?: repliesUpdateManyWithoutThreadsNestedInput
    users?: usersUpdateOneRequiredWithoutThreadsNestedInput
  }

  export type threadsUncheckedUpdateInput = {
    thread_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replies?: repliesUncheckedUpdateManyWithoutThreadsNestedInput
  }

  export type threadsCreateManyInput = {
    thread_id?: number
    user_id: number
    title: string
    body: string
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type threadsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type threadsUncheckedUpdateManyInput = {
    thread_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    username: string
    email?: string | null
    pass_hash: string
    role?: $Enums.users_role
    created_at?: Date | string
    last_login_at?: Date | string | null
    replies?: repliesCreateNestedManyWithoutUsersInput
    threads?: threadsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    username: string
    email?: string | null
    pass_hash: string
    role?: $Enums.users_role
    created_at?: Date | string
    last_login_at?: Date | string | null
    replies?: repliesUncheckedCreateNestedManyWithoutUsersInput
    threads?: threadsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    pass_hash?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replies?: repliesUpdateManyWithoutUsersNestedInput
    threads?: threadsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    pass_hash?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replies?: repliesUncheckedUpdateManyWithoutUsersNestedInput
    threads?: threadsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    user_id?: number
    username: string
    email?: string | null
    pass_hash: string
    role?: $Enums.users_role
    created_at?: Date | string
    last_login_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    pass_hash?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    pass_hash?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ThreadsScalarRelationFilter = {
    is?: threadsWhereInput
    isNot?: threadsWhereInput
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type RepliesNullableScalarRelationFilter = {
    is?: repliesWhereInput | null
    isNot?: repliesWhereInput | null
  }

  export type RepliesListRelationFilter = {
    every?: repliesWhereInput
    some?: repliesWhereInput
    none?: repliesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type repliesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type repliesOrderByRelevanceInput = {
    fields: repliesOrderByRelevanceFieldEnum | repliesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type repliesCountOrderByAggregateInput = {
    replie_id?: SortOrder
    thread_id?: SortOrder
    user_id?: SortOrder
    parent_id?: SortOrder
    body?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repliesAvgOrderByAggregateInput = {
    replie_id?: SortOrder
    thread_id?: SortOrder
    user_id?: SortOrder
    parent_id?: SortOrder
  }

  export type repliesMaxOrderByAggregateInput = {
    replie_id?: SortOrder
    thread_id?: SortOrder
    user_id?: SortOrder
    parent_id?: SortOrder
    body?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repliesMinOrderByAggregateInput = {
    replie_id?: SortOrder
    thread_id?: SortOrder
    user_id?: SortOrder
    parent_id?: SortOrder
    body?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repliesSumOrderByAggregateInput = {
    replie_id?: SortOrder
    thread_id?: SortOrder
    user_id?: SortOrder
    parent_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type threadsOrderByRelevanceInput = {
    fields: threadsOrderByRelevanceFieldEnum | threadsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type threadsCountOrderByAggregateInput = {
    thread_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    is_locked?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type threadsAvgOrderByAggregateInput = {
    thread_id?: SortOrder
    user_id?: SortOrder
  }

  export type threadsMaxOrderByAggregateInput = {
    thread_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    is_locked?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type threadsMinOrderByAggregateInput = {
    thread_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    is_locked?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type threadsSumOrderByAggregateInput = {
    thread_id?: SortOrder
    user_id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Enumusers_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleFilter<$PrismaModel> | $Enums.users_role
  }

  export type ThreadsListRelationFilter = {
    every?: threadsWhereInput
    some?: threadsWhereInput
    none?: threadsWhereInput
  }

  export type threadsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelevanceInput = {
    fields: usersOrderByRelevanceFieldEnum | usersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    pass_hash?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    last_login_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    pass_hash?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    last_login_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    pass_hash?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    last_login_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type Enumusers_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleWithAggregatesFilter<$PrismaModel> | $Enums.users_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumusers_roleFilter<$PrismaModel>
    _max?: NestedEnumusers_roleFilter<$PrismaModel>
  }

  export type threadsCreateNestedOneWithoutRepliesInput = {
    create?: XOR<threadsCreateWithoutRepliesInput, threadsUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: threadsCreateOrConnectWithoutRepliesInput
    connect?: threadsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutRepliesInput = {
    create?: XOR<usersCreateWithoutRepliesInput, usersUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: usersCreateOrConnectWithoutRepliesInput
    connect?: usersWhereUniqueInput
  }

  export type repliesCreateNestedOneWithoutOther_repliesInput = {
    create?: XOR<repliesCreateWithoutOther_repliesInput, repliesUncheckedCreateWithoutOther_repliesInput>
    connectOrCreate?: repliesCreateOrConnectWithoutOther_repliesInput
    connect?: repliesWhereUniqueInput
  }

  export type repliesCreateNestedManyWithoutRepliesInput = {
    create?: XOR<repliesCreateWithoutRepliesInput, repliesUncheckedCreateWithoutRepliesInput> | repliesCreateWithoutRepliesInput[] | repliesUncheckedCreateWithoutRepliesInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutRepliesInput | repliesCreateOrConnectWithoutRepliesInput[]
    createMany?: repliesCreateManyRepliesInputEnvelope
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
  }

  export type repliesUncheckedCreateNestedManyWithoutRepliesInput = {
    create?: XOR<repliesCreateWithoutRepliesInput, repliesUncheckedCreateWithoutRepliesInput> | repliesCreateWithoutRepliesInput[] | repliesUncheckedCreateWithoutRepliesInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutRepliesInput | repliesCreateOrConnectWithoutRepliesInput[]
    createMany?: repliesCreateManyRepliesInputEnvelope
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type threadsUpdateOneRequiredWithoutRepliesNestedInput = {
    create?: XOR<threadsCreateWithoutRepliesInput, threadsUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: threadsCreateOrConnectWithoutRepliesInput
    upsert?: threadsUpsertWithoutRepliesInput
    connect?: threadsWhereUniqueInput
    update?: XOR<XOR<threadsUpdateToOneWithWhereWithoutRepliesInput, threadsUpdateWithoutRepliesInput>, threadsUncheckedUpdateWithoutRepliesInput>
  }

  export type usersUpdateOneRequiredWithoutRepliesNestedInput = {
    create?: XOR<usersCreateWithoutRepliesInput, usersUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: usersCreateOrConnectWithoutRepliesInput
    upsert?: usersUpsertWithoutRepliesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutRepliesInput, usersUpdateWithoutRepliesInput>, usersUncheckedUpdateWithoutRepliesInput>
  }

  export type repliesUpdateOneWithoutOther_repliesNestedInput = {
    create?: XOR<repliesCreateWithoutOther_repliesInput, repliesUncheckedCreateWithoutOther_repliesInput>
    connectOrCreate?: repliesCreateOrConnectWithoutOther_repliesInput
    upsert?: repliesUpsertWithoutOther_repliesInput
    disconnect?: repliesWhereInput | boolean
    delete?: repliesWhereInput | boolean
    connect?: repliesWhereUniqueInput
    update?: XOR<XOR<repliesUpdateToOneWithWhereWithoutOther_repliesInput, repliesUpdateWithoutOther_repliesInput>, repliesUncheckedUpdateWithoutOther_repliesInput>
  }

  export type repliesUpdateManyWithoutRepliesNestedInput = {
    create?: XOR<repliesCreateWithoutRepliesInput, repliesUncheckedCreateWithoutRepliesInput> | repliesCreateWithoutRepliesInput[] | repliesUncheckedCreateWithoutRepliesInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutRepliesInput | repliesCreateOrConnectWithoutRepliesInput[]
    upsert?: repliesUpsertWithWhereUniqueWithoutRepliesInput | repliesUpsertWithWhereUniqueWithoutRepliesInput[]
    createMany?: repliesCreateManyRepliesInputEnvelope
    set?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    disconnect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    delete?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    update?: repliesUpdateWithWhereUniqueWithoutRepliesInput | repliesUpdateWithWhereUniqueWithoutRepliesInput[]
    updateMany?: repliesUpdateManyWithWhereWithoutRepliesInput | repliesUpdateManyWithWhereWithoutRepliesInput[]
    deleteMany?: repliesScalarWhereInput | repliesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type repliesUncheckedUpdateManyWithoutRepliesNestedInput = {
    create?: XOR<repliesCreateWithoutRepliesInput, repliesUncheckedCreateWithoutRepliesInput> | repliesCreateWithoutRepliesInput[] | repliesUncheckedCreateWithoutRepliesInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutRepliesInput | repliesCreateOrConnectWithoutRepliesInput[]
    upsert?: repliesUpsertWithWhereUniqueWithoutRepliesInput | repliesUpsertWithWhereUniqueWithoutRepliesInput[]
    createMany?: repliesCreateManyRepliesInputEnvelope
    set?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    disconnect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    delete?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    update?: repliesUpdateWithWhereUniqueWithoutRepliesInput | repliesUpdateWithWhereUniqueWithoutRepliesInput[]
    updateMany?: repliesUpdateManyWithWhereWithoutRepliesInput | repliesUpdateManyWithWhereWithoutRepliesInput[]
    deleteMany?: repliesScalarWhereInput | repliesScalarWhereInput[]
  }

  export type repliesCreateNestedManyWithoutThreadsInput = {
    create?: XOR<repliesCreateWithoutThreadsInput, repliesUncheckedCreateWithoutThreadsInput> | repliesCreateWithoutThreadsInput[] | repliesUncheckedCreateWithoutThreadsInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutThreadsInput | repliesCreateOrConnectWithoutThreadsInput[]
    createMany?: repliesCreateManyThreadsInputEnvelope
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutThreadsInput = {
    create?: XOR<usersCreateWithoutThreadsInput, usersUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: usersCreateOrConnectWithoutThreadsInput
    connect?: usersWhereUniqueInput
  }

  export type repliesUncheckedCreateNestedManyWithoutThreadsInput = {
    create?: XOR<repliesCreateWithoutThreadsInput, repliesUncheckedCreateWithoutThreadsInput> | repliesCreateWithoutThreadsInput[] | repliesUncheckedCreateWithoutThreadsInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutThreadsInput | repliesCreateOrConnectWithoutThreadsInput[]
    createMany?: repliesCreateManyThreadsInputEnvelope
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
  }

  export type repliesUpdateManyWithoutThreadsNestedInput = {
    create?: XOR<repliesCreateWithoutThreadsInput, repliesUncheckedCreateWithoutThreadsInput> | repliesCreateWithoutThreadsInput[] | repliesUncheckedCreateWithoutThreadsInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutThreadsInput | repliesCreateOrConnectWithoutThreadsInput[]
    upsert?: repliesUpsertWithWhereUniqueWithoutThreadsInput | repliesUpsertWithWhereUniqueWithoutThreadsInput[]
    createMany?: repliesCreateManyThreadsInputEnvelope
    set?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    disconnect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    delete?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    update?: repliesUpdateWithWhereUniqueWithoutThreadsInput | repliesUpdateWithWhereUniqueWithoutThreadsInput[]
    updateMany?: repliesUpdateManyWithWhereWithoutThreadsInput | repliesUpdateManyWithWhereWithoutThreadsInput[]
    deleteMany?: repliesScalarWhereInput | repliesScalarWhereInput[]
  }

  export type usersUpdateOneRequiredWithoutThreadsNestedInput = {
    create?: XOR<usersCreateWithoutThreadsInput, usersUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: usersCreateOrConnectWithoutThreadsInput
    upsert?: usersUpsertWithoutThreadsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutThreadsInput, usersUpdateWithoutThreadsInput>, usersUncheckedUpdateWithoutThreadsInput>
  }

  export type repliesUncheckedUpdateManyWithoutThreadsNestedInput = {
    create?: XOR<repliesCreateWithoutThreadsInput, repliesUncheckedCreateWithoutThreadsInput> | repliesCreateWithoutThreadsInput[] | repliesUncheckedCreateWithoutThreadsInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutThreadsInput | repliesCreateOrConnectWithoutThreadsInput[]
    upsert?: repliesUpsertWithWhereUniqueWithoutThreadsInput | repliesUpsertWithWhereUniqueWithoutThreadsInput[]
    createMany?: repliesCreateManyThreadsInputEnvelope
    set?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    disconnect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    delete?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    update?: repliesUpdateWithWhereUniqueWithoutThreadsInput | repliesUpdateWithWhereUniqueWithoutThreadsInput[]
    updateMany?: repliesUpdateManyWithWhereWithoutThreadsInput | repliesUpdateManyWithWhereWithoutThreadsInput[]
    deleteMany?: repliesScalarWhereInput | repliesScalarWhereInput[]
  }

  export type repliesCreateNestedManyWithoutUsersInput = {
    create?: XOR<repliesCreateWithoutUsersInput, repliesUncheckedCreateWithoutUsersInput> | repliesCreateWithoutUsersInput[] | repliesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutUsersInput | repliesCreateOrConnectWithoutUsersInput[]
    createMany?: repliesCreateManyUsersInputEnvelope
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
  }

  export type threadsCreateNestedManyWithoutUsersInput = {
    create?: XOR<threadsCreateWithoutUsersInput, threadsUncheckedCreateWithoutUsersInput> | threadsCreateWithoutUsersInput[] | threadsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: threadsCreateOrConnectWithoutUsersInput | threadsCreateOrConnectWithoutUsersInput[]
    createMany?: threadsCreateManyUsersInputEnvelope
    connect?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
  }

  export type repliesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<repliesCreateWithoutUsersInput, repliesUncheckedCreateWithoutUsersInput> | repliesCreateWithoutUsersInput[] | repliesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutUsersInput | repliesCreateOrConnectWithoutUsersInput[]
    createMany?: repliesCreateManyUsersInputEnvelope
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
  }

  export type threadsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<threadsCreateWithoutUsersInput, threadsUncheckedCreateWithoutUsersInput> | threadsCreateWithoutUsersInput[] | threadsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: threadsCreateOrConnectWithoutUsersInput | threadsCreateOrConnectWithoutUsersInput[]
    createMany?: threadsCreateManyUsersInputEnvelope
    connect?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type Enumusers_roleFieldUpdateOperationsInput = {
    set?: $Enums.users_role
  }

  export type repliesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<repliesCreateWithoutUsersInput, repliesUncheckedCreateWithoutUsersInput> | repliesCreateWithoutUsersInput[] | repliesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutUsersInput | repliesCreateOrConnectWithoutUsersInput[]
    upsert?: repliesUpsertWithWhereUniqueWithoutUsersInput | repliesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: repliesCreateManyUsersInputEnvelope
    set?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    disconnect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    delete?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    update?: repliesUpdateWithWhereUniqueWithoutUsersInput | repliesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: repliesUpdateManyWithWhereWithoutUsersInput | repliesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: repliesScalarWhereInput | repliesScalarWhereInput[]
  }

  export type threadsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<threadsCreateWithoutUsersInput, threadsUncheckedCreateWithoutUsersInput> | threadsCreateWithoutUsersInput[] | threadsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: threadsCreateOrConnectWithoutUsersInput | threadsCreateOrConnectWithoutUsersInput[]
    upsert?: threadsUpsertWithWhereUniqueWithoutUsersInput | threadsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: threadsCreateManyUsersInputEnvelope
    set?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
    disconnect?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
    delete?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
    connect?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
    update?: threadsUpdateWithWhereUniqueWithoutUsersInput | threadsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: threadsUpdateManyWithWhereWithoutUsersInput | threadsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: threadsScalarWhereInput | threadsScalarWhereInput[]
  }

  export type repliesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<repliesCreateWithoutUsersInput, repliesUncheckedCreateWithoutUsersInput> | repliesCreateWithoutUsersInput[] | repliesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: repliesCreateOrConnectWithoutUsersInput | repliesCreateOrConnectWithoutUsersInput[]
    upsert?: repliesUpsertWithWhereUniqueWithoutUsersInput | repliesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: repliesCreateManyUsersInputEnvelope
    set?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    disconnect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    delete?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    connect?: repliesWhereUniqueInput | repliesWhereUniqueInput[]
    update?: repliesUpdateWithWhereUniqueWithoutUsersInput | repliesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: repliesUpdateManyWithWhereWithoutUsersInput | repliesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: repliesScalarWhereInput | repliesScalarWhereInput[]
  }

  export type threadsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<threadsCreateWithoutUsersInput, threadsUncheckedCreateWithoutUsersInput> | threadsCreateWithoutUsersInput[] | threadsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: threadsCreateOrConnectWithoutUsersInput | threadsCreateOrConnectWithoutUsersInput[]
    upsert?: threadsUpsertWithWhereUniqueWithoutUsersInput | threadsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: threadsCreateManyUsersInputEnvelope
    set?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
    disconnect?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
    delete?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
    connect?: threadsWhereUniqueInput | threadsWhereUniqueInput[]
    update?: threadsUpdateWithWhereUniqueWithoutUsersInput | threadsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: threadsUpdateManyWithWhereWithoutUsersInput | threadsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: threadsScalarWhereInput | threadsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumusers_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleFilter<$PrismaModel> | $Enums.users_role
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumusers_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.users_role | Enumusers_roleFieldRefInput<$PrismaModel>
    in?: $Enums.users_role[]
    notIn?: $Enums.users_role[]
    not?: NestedEnumusers_roleWithAggregatesFilter<$PrismaModel> | $Enums.users_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumusers_roleFilter<$PrismaModel>
    _max?: NestedEnumusers_roleFilter<$PrismaModel>
  }

  export type threadsCreateWithoutRepliesInput = {
    title: string
    body: string
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    users: usersCreateNestedOneWithoutThreadsInput
  }

  export type threadsUncheckedCreateWithoutRepliesInput = {
    thread_id?: number
    user_id: number
    title: string
    body: string
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type threadsCreateOrConnectWithoutRepliesInput = {
    where: threadsWhereUniqueInput
    create: XOR<threadsCreateWithoutRepliesInput, threadsUncheckedCreateWithoutRepliesInput>
  }

  export type usersCreateWithoutRepliesInput = {
    username: string
    email?: string | null
    pass_hash: string
    role?: $Enums.users_role
    created_at?: Date | string
    last_login_at?: Date | string | null
    threads?: threadsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutRepliesInput = {
    user_id?: number
    username: string
    email?: string | null
    pass_hash: string
    role?: $Enums.users_role
    created_at?: Date | string
    last_login_at?: Date | string | null
    threads?: threadsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutRepliesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRepliesInput, usersUncheckedCreateWithoutRepliesInput>
  }

  export type repliesCreateWithoutOther_repliesInput = {
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    threads: threadsCreateNestedOneWithoutRepliesInput
    users: usersCreateNestedOneWithoutRepliesInput
    replies?: repliesCreateNestedOneWithoutOther_repliesInput
  }

  export type repliesUncheckedCreateWithoutOther_repliesInput = {
    replie_id?: number
    thread_id: number
    user_id: number
    parent_id?: number | null
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type repliesCreateOrConnectWithoutOther_repliesInput = {
    where: repliesWhereUniqueInput
    create: XOR<repliesCreateWithoutOther_repliesInput, repliesUncheckedCreateWithoutOther_repliesInput>
  }

  export type repliesCreateWithoutRepliesInput = {
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    threads: threadsCreateNestedOneWithoutRepliesInput
    users: usersCreateNestedOneWithoutRepliesInput
    other_replies?: repliesCreateNestedManyWithoutRepliesInput
  }

  export type repliesUncheckedCreateWithoutRepliesInput = {
    replie_id?: number
    thread_id: number
    user_id: number
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    other_replies?: repliesUncheckedCreateNestedManyWithoutRepliesInput
  }

  export type repliesCreateOrConnectWithoutRepliesInput = {
    where: repliesWhereUniqueInput
    create: XOR<repliesCreateWithoutRepliesInput, repliesUncheckedCreateWithoutRepliesInput>
  }

  export type repliesCreateManyRepliesInputEnvelope = {
    data: repliesCreateManyRepliesInput | repliesCreateManyRepliesInput[]
    skipDuplicates?: boolean
  }

  export type threadsUpsertWithoutRepliesInput = {
    update: XOR<threadsUpdateWithoutRepliesInput, threadsUncheckedUpdateWithoutRepliesInput>
    create: XOR<threadsCreateWithoutRepliesInput, threadsUncheckedCreateWithoutRepliesInput>
    where?: threadsWhereInput
  }

  export type threadsUpdateToOneWithWhereWithoutRepliesInput = {
    where?: threadsWhereInput
    data: XOR<threadsUpdateWithoutRepliesInput, threadsUncheckedUpdateWithoutRepliesInput>
  }

  export type threadsUpdateWithoutRepliesInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutThreadsNestedInput
  }

  export type threadsUncheckedUpdateWithoutRepliesInput = {
    thread_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUpsertWithoutRepliesInput = {
    update: XOR<usersUpdateWithoutRepliesInput, usersUncheckedUpdateWithoutRepliesInput>
    create: XOR<usersCreateWithoutRepliesInput, usersUncheckedCreateWithoutRepliesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutRepliesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutRepliesInput, usersUncheckedUpdateWithoutRepliesInput>
  }

  export type usersUpdateWithoutRepliesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    pass_hash?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threads?: threadsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutRepliesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    pass_hash?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threads?: threadsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type repliesUpsertWithoutOther_repliesInput = {
    update: XOR<repliesUpdateWithoutOther_repliesInput, repliesUncheckedUpdateWithoutOther_repliesInput>
    create: XOR<repliesCreateWithoutOther_repliesInput, repliesUncheckedCreateWithoutOther_repliesInput>
    where?: repliesWhereInput
  }

  export type repliesUpdateToOneWithWhereWithoutOther_repliesInput = {
    where?: repliesWhereInput
    data: XOR<repliesUpdateWithoutOther_repliesInput, repliesUncheckedUpdateWithoutOther_repliesInput>
  }

  export type repliesUpdateWithoutOther_repliesInput = {
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threads?: threadsUpdateOneRequiredWithoutRepliesNestedInput
    users?: usersUpdateOneRequiredWithoutRepliesNestedInput
    replies?: repliesUpdateOneWithoutOther_repliesNestedInput
  }

  export type repliesUncheckedUpdateWithoutOther_repliesInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    thread_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repliesUpsertWithWhereUniqueWithoutRepliesInput = {
    where: repliesWhereUniqueInput
    update: XOR<repliesUpdateWithoutRepliesInput, repliesUncheckedUpdateWithoutRepliesInput>
    create: XOR<repliesCreateWithoutRepliesInput, repliesUncheckedCreateWithoutRepliesInput>
  }

  export type repliesUpdateWithWhereUniqueWithoutRepliesInput = {
    where: repliesWhereUniqueInput
    data: XOR<repliesUpdateWithoutRepliesInput, repliesUncheckedUpdateWithoutRepliesInput>
  }

  export type repliesUpdateManyWithWhereWithoutRepliesInput = {
    where: repliesScalarWhereInput
    data: XOR<repliesUpdateManyMutationInput, repliesUncheckedUpdateManyWithoutRepliesInput>
  }

  export type repliesScalarWhereInput = {
    AND?: repliesScalarWhereInput | repliesScalarWhereInput[]
    OR?: repliesScalarWhereInput[]
    NOT?: repliesScalarWhereInput | repliesScalarWhereInput[]
    replie_id?: IntFilter<"replies"> | number
    thread_id?: IntFilter<"replies"> | number
    user_id?: IntFilter<"replies"> | number
    parent_id?: IntNullableFilter<"replies"> | number | null
    body?: StringFilter<"replies"> | string
    is_deleted?: BoolFilter<"replies"> | boolean
    created_at?: DateTimeFilter<"replies"> | Date | string
    updated_at?: DateTimeNullableFilter<"replies"> | Date | string | null
  }

  export type repliesCreateWithoutThreadsInput = {
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    users: usersCreateNestedOneWithoutRepliesInput
    replies?: repliesCreateNestedOneWithoutOther_repliesInput
    other_replies?: repliesCreateNestedManyWithoutRepliesInput
  }

  export type repliesUncheckedCreateWithoutThreadsInput = {
    replie_id?: number
    user_id: number
    parent_id?: number | null
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    other_replies?: repliesUncheckedCreateNestedManyWithoutRepliesInput
  }

  export type repliesCreateOrConnectWithoutThreadsInput = {
    where: repliesWhereUniqueInput
    create: XOR<repliesCreateWithoutThreadsInput, repliesUncheckedCreateWithoutThreadsInput>
  }

  export type repliesCreateManyThreadsInputEnvelope = {
    data: repliesCreateManyThreadsInput | repliesCreateManyThreadsInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutThreadsInput = {
    username: string
    email?: string | null
    pass_hash: string
    role?: $Enums.users_role
    created_at?: Date | string
    last_login_at?: Date | string | null
    replies?: repliesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutThreadsInput = {
    user_id?: number
    username: string
    email?: string | null
    pass_hash: string
    role?: $Enums.users_role
    created_at?: Date | string
    last_login_at?: Date | string | null
    replies?: repliesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutThreadsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutThreadsInput, usersUncheckedCreateWithoutThreadsInput>
  }

  export type repliesUpsertWithWhereUniqueWithoutThreadsInput = {
    where: repliesWhereUniqueInput
    update: XOR<repliesUpdateWithoutThreadsInput, repliesUncheckedUpdateWithoutThreadsInput>
    create: XOR<repliesCreateWithoutThreadsInput, repliesUncheckedCreateWithoutThreadsInput>
  }

  export type repliesUpdateWithWhereUniqueWithoutThreadsInput = {
    where: repliesWhereUniqueInput
    data: XOR<repliesUpdateWithoutThreadsInput, repliesUncheckedUpdateWithoutThreadsInput>
  }

  export type repliesUpdateManyWithWhereWithoutThreadsInput = {
    where: repliesScalarWhereInput
    data: XOR<repliesUpdateManyMutationInput, repliesUncheckedUpdateManyWithoutThreadsInput>
  }

  export type usersUpsertWithoutThreadsInput = {
    update: XOR<usersUpdateWithoutThreadsInput, usersUncheckedUpdateWithoutThreadsInput>
    create: XOR<usersCreateWithoutThreadsInput, usersUncheckedCreateWithoutThreadsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutThreadsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutThreadsInput, usersUncheckedUpdateWithoutThreadsInput>
  }

  export type usersUpdateWithoutThreadsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    pass_hash?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replies?: repliesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutThreadsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    pass_hash?: StringFieldUpdateOperationsInput | string
    role?: Enumusers_roleFieldUpdateOperationsInput | $Enums.users_role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_login_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replies?: repliesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type repliesCreateWithoutUsersInput = {
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    threads: threadsCreateNestedOneWithoutRepliesInput
    replies?: repliesCreateNestedOneWithoutOther_repliesInput
    other_replies?: repliesCreateNestedManyWithoutRepliesInput
  }

  export type repliesUncheckedCreateWithoutUsersInput = {
    replie_id?: number
    thread_id: number
    parent_id?: number | null
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    other_replies?: repliesUncheckedCreateNestedManyWithoutRepliesInput
  }

  export type repliesCreateOrConnectWithoutUsersInput = {
    where: repliesWhereUniqueInput
    create: XOR<repliesCreateWithoutUsersInput, repliesUncheckedCreateWithoutUsersInput>
  }

  export type repliesCreateManyUsersInputEnvelope = {
    data: repliesCreateManyUsersInput | repliesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type threadsCreateWithoutUsersInput = {
    title: string
    body: string
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    replies?: repliesCreateNestedManyWithoutThreadsInput
  }

  export type threadsUncheckedCreateWithoutUsersInput = {
    thread_id?: number
    title: string
    body: string
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    replies?: repliesUncheckedCreateNestedManyWithoutThreadsInput
  }

  export type threadsCreateOrConnectWithoutUsersInput = {
    where: threadsWhereUniqueInput
    create: XOR<threadsCreateWithoutUsersInput, threadsUncheckedCreateWithoutUsersInput>
  }

  export type threadsCreateManyUsersInputEnvelope = {
    data: threadsCreateManyUsersInput | threadsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type repliesUpsertWithWhereUniqueWithoutUsersInput = {
    where: repliesWhereUniqueInput
    update: XOR<repliesUpdateWithoutUsersInput, repliesUncheckedUpdateWithoutUsersInput>
    create: XOR<repliesCreateWithoutUsersInput, repliesUncheckedCreateWithoutUsersInput>
  }

  export type repliesUpdateWithWhereUniqueWithoutUsersInput = {
    where: repliesWhereUniqueInput
    data: XOR<repliesUpdateWithoutUsersInput, repliesUncheckedUpdateWithoutUsersInput>
  }

  export type repliesUpdateManyWithWhereWithoutUsersInput = {
    where: repliesScalarWhereInput
    data: XOR<repliesUpdateManyMutationInput, repliesUncheckedUpdateManyWithoutUsersInput>
  }

  export type threadsUpsertWithWhereUniqueWithoutUsersInput = {
    where: threadsWhereUniqueInput
    update: XOR<threadsUpdateWithoutUsersInput, threadsUncheckedUpdateWithoutUsersInput>
    create: XOR<threadsCreateWithoutUsersInput, threadsUncheckedCreateWithoutUsersInput>
  }

  export type threadsUpdateWithWhereUniqueWithoutUsersInput = {
    where: threadsWhereUniqueInput
    data: XOR<threadsUpdateWithoutUsersInput, threadsUncheckedUpdateWithoutUsersInput>
  }

  export type threadsUpdateManyWithWhereWithoutUsersInput = {
    where: threadsScalarWhereInput
    data: XOR<threadsUpdateManyMutationInput, threadsUncheckedUpdateManyWithoutUsersInput>
  }

  export type threadsScalarWhereInput = {
    AND?: threadsScalarWhereInput | threadsScalarWhereInput[]
    OR?: threadsScalarWhereInput[]
    NOT?: threadsScalarWhereInput | threadsScalarWhereInput[]
    thread_id?: IntFilter<"threads"> | number
    user_id?: IntFilter<"threads"> | number
    title?: StringFilter<"threads"> | string
    body?: StringFilter<"threads"> | string
    is_locked?: BoolFilter<"threads"> | boolean
    is_deleted?: BoolFilter<"threads"> | boolean
    created_at?: DateTimeFilter<"threads"> | Date | string
    updated_at?: DateTimeNullableFilter<"threads"> | Date | string | null
  }

  export type repliesCreateManyRepliesInput = {
    replie_id?: number
    thread_id: number
    user_id: number
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type repliesUpdateWithoutRepliesInput = {
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threads?: threadsUpdateOneRequiredWithoutRepliesNestedInput
    users?: usersUpdateOneRequiredWithoutRepliesNestedInput
    other_replies?: repliesUpdateManyWithoutRepliesNestedInput
  }

  export type repliesUncheckedUpdateWithoutRepliesInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    thread_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_replies?: repliesUncheckedUpdateManyWithoutRepliesNestedInput
  }

  export type repliesUncheckedUpdateManyWithoutRepliesInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    thread_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repliesCreateManyThreadsInput = {
    replie_id?: number
    user_id: number
    parent_id?: number | null
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type repliesUpdateWithoutThreadsInput = {
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutRepliesNestedInput
    replies?: repliesUpdateOneWithoutOther_repliesNestedInput
    other_replies?: repliesUpdateManyWithoutRepliesNestedInput
  }

  export type repliesUncheckedUpdateWithoutThreadsInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_replies?: repliesUncheckedUpdateManyWithoutRepliesNestedInput
  }

  export type repliesUncheckedUpdateManyWithoutThreadsInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type repliesCreateManyUsersInput = {
    replie_id?: number
    thread_id: number
    parent_id?: number | null
    body: string
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type threadsCreateManyUsersInput = {
    thread_id?: number
    title: string
    body: string
    is_locked?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type repliesUpdateWithoutUsersInput = {
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    threads?: threadsUpdateOneRequiredWithoutRepliesNestedInput
    replies?: repliesUpdateOneWithoutOther_repliesNestedInput
    other_replies?: repliesUpdateManyWithoutRepliesNestedInput
  }

  export type repliesUncheckedUpdateWithoutUsersInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    thread_id?: IntFieldUpdateOperationsInput | number
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    other_replies?: repliesUncheckedUpdateManyWithoutRepliesNestedInput
  }

  export type repliesUncheckedUpdateManyWithoutUsersInput = {
    replie_id?: IntFieldUpdateOperationsInput | number
    thread_id?: IntFieldUpdateOperationsInput | number
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    body?: StringFieldUpdateOperationsInput | string
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type threadsUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replies?: repliesUpdateManyWithoutThreadsNestedInput
  }

  export type threadsUncheckedUpdateWithoutUsersInput = {
    thread_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replies?: repliesUncheckedUpdateManyWithoutThreadsNestedInput
  }

  export type threadsUncheckedUpdateManyWithoutUsersInput = {
    thread_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    is_locked?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}